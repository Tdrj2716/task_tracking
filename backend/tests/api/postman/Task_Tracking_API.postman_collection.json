{
	"info": {
		"_postman_id": "task-tracking-api-collection",
		"name": "Task Tracking API",
		"description": "タスクタイムトラッキングWebアプリのAPI動作確認テストコレクション",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has status ok\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('ok');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/health/",
					"host": ["{{base_url}}"],
					"path": ["api", "health", ""]
				},
				"description": "認証不要のヘルスチェックエンドポイント"
			},
			"response": []
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has results array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "ユーザーのプロジェクト一覧を取得"
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has project data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.eql('Test Project from Postman');",
									"    pm.expect(jsonData).to.have.property('color');",
									"    pm.expect(jsonData.color).to.eql('#3498db');",
									"    ",
									"    // Save project ID for later tests",
									"    pm.environment.set('test_project_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Project from Postman\",\n    \"color\": \"#3498db\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "新しいプロジェクトを作成"
					},
					"response": []
				},
				{
					"name": "Get Single Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get('test_project_id')));",
									"    pm.expect(jsonData.name).to.eql('Test Project from Postman');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "特定のプロジェクトを取得"
					},
					"response": []
				},
				{
					"name": "Update Project (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project name was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Updated Project Name');",
									"    pm.expect(jsonData.color).to.eql('#3498db');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Project Name\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "プロジェクトの一部フィールドを更新"
					},
					"response": []
				},
				{
					"name": "Update Project (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project was fully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Fully Updated Project');",
									"    pm.expect(jsonData.color).to.eql('#e74c3c');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fully Updated Project\",\n    \"color\": \"#e74c3c\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "プロジェクトの全フィールドを更新"
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "プロジェクトを削除"
					},
					"response": []
				},
				{
					"name": "Verify Project Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message indicates not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "削除されたプロジェクトが取得できないことを確認"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Get All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has results array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tags/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", ""]
						},
						"description": "ユーザーのタグ一覧を取得"
					},
					"response": []
				},
				{
					"name": "Create Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has tag data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.eql('Test Tag');",
									"    ",
									"    // Save tag ID for later tests",
									"    pm.environment.set('test_tag_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Tag\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tags/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", ""]
						},
						"description": "新しいタグを作成"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Tag (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates uniqueness constraint\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Tag\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tags/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", ""]
						},
						"description": "同じユーザーで同じ名前のタグを作成すると400エラーが返されることを確認"
					},
					"response": []
				},
				{
					"name": "Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tags/{{test_tag_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", "{{test_tag_id}}", ""]
						},
						"description": "タグを削除"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "Unauthorized Access - Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message indicates authentication required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "認証なしでアクセスすると401エラーが返されることを確認"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		}
	]
}
