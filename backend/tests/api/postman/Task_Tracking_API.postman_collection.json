{
	"info": {
		"_postman_id": "task-tracking-api-collection",
		"name": "Task Tracking API",
		"description": "タスクタイムトラッキングWebアプリのAPI動作確認テストコレクション",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has status ok\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('ok');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/health/",
					"host": ["{{base_url}}"],
					"path": ["api", "health", ""]
				},
				"description": "認証不要のヘルスチェックエンドポイント"
			},
			"response": []
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has results array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "ユーザーのプロジェクト一覧を取得"
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has project data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.eql('Test Project from Postman');",
									"    pm.expect(jsonData).to.have.property('color');",
									"    pm.expect(jsonData.color).to.eql('#3498db');",
									"    ",
									"    // Save project ID for later tests",
									"    pm.environment.set('test_project_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Project from Postman\",\n    \"color\": \"#3498db\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "新しいプロジェクトを作成"
					},
					"response": []
				},
				{
					"name": "Get Single Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get('test_project_id')));",
									"    pm.expect(jsonData.name).to.eql('Test Project from Postman');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "特定のプロジェクトを取得"
					},
					"response": []
				},
				{
					"name": "Update Project (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project name was updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Updated Project Name');",
									"    pm.expect(jsonData.color).to.eql('#3498db');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Project Name\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "プロジェクトの一部フィールドを更新"
					},
					"response": []
				},
				{
					"name": "Update Project (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project was fully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Fully Updated Project');",
									"    pm.expect(jsonData.color).to.eql('#e74c3c');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fully Updated Project\",\n    \"color\": \"#e74c3c\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "プロジェクトの全フィールドを更新"
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "プロジェクトを削除"
					},
					"response": []
				},
				{
					"name": "Verify Project Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message indicates not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{test_project_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", "{{test_project_id}}", ""]
						},
						"description": "削除されたプロジェクトが取得できないことを確認"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Get All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has results array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tags/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", ""]
						},
						"description": "ユーザーのタグ一覧を取得"
					},
					"response": []
				},
				{
					"name": "Create Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has tag data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.eql('Test Tag');",
									"    ",
									"    // Save tag ID for later tests",
									"    pm.environment.set('test_tag_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Tag\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tags/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", ""]
						},
						"description": "新しいタグを作成"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Tag (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates uniqueness constraint\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Tag\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tags/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", ""]
						},
						"description": "同じユーザーで同じ名前のタグを作成すると400エラーが返されることを確認"
					},
					"response": []
				},
				{
					"name": "Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tags/{{test_tag_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tags", "{{test_tag_id}}", ""]
						},
						"description": "タグを削除"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create Project for Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has project data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    ",
									"    // Save project ID for task tests",
									"    pm.environment.set('test_task_project_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Task Test Project\",\n    \"color\": \"#2ecc71\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "タスクテスト用のプロジェクトを作成"
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has results array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tasks/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", ""]
						},
						"description": "ユーザーのタスク一覧を取得"
					},
					"response": []
				},
				{
					"name": "Create Root Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has task data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name).to.eql('Root Task');",
									"    pm.expect(jsonData.level).to.eql(0);",
									"    pm.expect(jsonData.parent).to.be.null;",
									"    ",
									"    // Save task ID for later tests",
									"    pm.environment.set('test_root_task_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Root Task\",\n    \"description\": \"This is a root task\",\n    \"project\": {{test_task_project_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", ""]
						},
						"description": "新しいルートタスクを作成"
					},
					"response": []
				},
				{
					"name": "Create Child Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has child task data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.name).to.eql('Child Task');",
									"    pm.expect(jsonData.level).to.eql(1);",
									"    pm.expect(jsonData.parent).to.eql(parseInt(pm.environment.get('test_root_task_id')));",
									"    ",
									"    // Save child task ID",
									"    pm.environment.set('test_child_task_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Child Task\",\n    \"description\": \"This is a child task\",\n    \"parent\": {{test_root_task_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", ""]
						},
						"description": "親タスクを指定してサブタスクを作成"
					},
					"response": []
				},
				{
					"name": "Create Grandchild Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has grandchild task data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Grandchild Task');",
									"    pm.expect(jsonData.level).to.eql(2);",
									"    pm.expect(jsonData.parent).to.eql(parseInt(pm.environment.get('test_child_task_id')));",
									"    ",
									"    // Save grandchild task ID",
									"    pm.environment.set('test_grandchild_task_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Grandchild Task\",\n    \"description\": \"This is a grandchild task (max level)\",\n    \"parent\": {{test_child_task_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", ""]
						},
						"description": "孫タスクを作成（最大階層）"
					},
					"response": []
				},
				{
					"name": "Create Great-Grandchild Task (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates max level exceeded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('parent');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Great-Grandchild Task\",\n    \"description\": \"This should fail - exceeds max level\",\n    \"parent\": {{test_grandchild_task_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", ""]
						},
						"description": "3階層を超えるタスクを作成（エラー期待）"
					},
					"response": []
				},
				{
					"name": "Update Task (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Task name and description were updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Updated Root Task');",
									"    pm.expect(jsonData.description).to.eql('Updated description');",
									"    pm.expect(jsonData.level).to.eql(0);",
									"    pm.expect(jsonData.parent).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Root Task\",\n    \"description\": \"Updated description\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_root_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_root_task_id}}", ""]
						},
						"description": "タスクの一部フィールドを更新（PATCH）"
					},
					"response": []
				},
				{
					"name": "Update Task (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Task was fully updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql('Fully Updated Root Task');",
									"    pm.expect(jsonData.description).to.eql('Completely new description');",
									"    pm.expect(jsonData.estimate_minutes).to.eql(120);",
									"    pm.expect(jsonData.project).to.eql(parseInt(pm.environment.get('test_task_project_id')));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fully Updated Root Task\",\n    \"description\": \"Completely new description\",\n    \"estimate_minutes\": 120,\n    \"project\": {{test_task_project_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_root_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_root_task_id}}", ""]
						},
						"description": "タスクの全フィールドを更新（PUT）"
					},
					"response": []
				},
				{
					"name": "Create Second Root Task for Parent Change Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has task data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.name).to.eql('Second Root Task');",
									"    pm.expect(jsonData.level).to.eql(0);",
									"    ",
									"    // Save second root task ID",
									"    pm.environment.set('test_second_root_task_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Second Root Task\",\n    \"description\": \"For testing parent changes\",\n    \"project\": {{test_task_project_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", ""]
						},
						"description": "親タスク変更テスト用の2つ目のルートタスクを作成"
					},
					"response": []
				},
				{
					"name": "Update Child Task - Change Parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Parent was changed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.parent).to.eql(parseInt(pm.environment.get('test_second_root_task_id')));",
									"    pm.expect(jsonData.level).to.eql(1);",
									"    pm.expect(jsonData.root).to.eql(parseInt(pm.environment.get('test_second_root_task_id')));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"parent\": {{test_second_root_task_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_child_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_child_task_id}}", ""]
						},
						"description": "子タスクの親を別のルートタスクに変更"
					},
					"response": []
				},
				{
					"name": "Update Grandchild - Set Invalid Parent (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates grandchild cannot have children\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('parent');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"parent\": {{test_grandchild_task_id}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_child_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_child_task_id}}", ""]
						},
						"description": "子タスクの親を孫タスクに変更しようとする（エラー期待）"
					},
					"response": []
				},
				{
					"name": "Update Task - Add Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Tags were added to task\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tags).to.be.an('array');",
									"    pm.expect(jsonData.tags.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a tag first",
									"const createTagRequest = {",
									"    url: pm.environment.get('base_url') + '/api/tags/',",
									"    method: 'POST',",
									"    header: {",
									"        'Authorization': 'Token ' + pm.environment.get('auth_token'),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            name: 'Task Update Test Tag'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(createTagRequest, function (err, response) {",
									"    if (!err && response.code === 201) {",
									"        const tagData = response.json();",
									"        pm.environment.set('test_task_update_tag_id', tagData.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": [{{test_task_update_tag_id}}]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_root_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_root_task_id}}", ""]
						},
						"description": "タスクにタグを追加"
					},
					"response": []
				},
				{
					"name": "Update Task - Remove All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All tags were removed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tags).to.be.an('array');",
									"    pm.expect(jsonData.tags).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tags\": []\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_root_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_root_task_id}}", ""]
						},
						"description": "タスクから全てのタグを削除"
					},
					"response": []
				},
				{
					"name": "Delete Root Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Token {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/tasks/{{test_root_task_id}}/",
							"host": ["{{base_url}}"],
							"path": ["api", "tasks", "{{test_root_task_id}}", ""]
						},
						"description": "ルートタスクを削除（子孫タスクもカスケード削除される）"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "Unauthorized Access - Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message indicates authentication required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": ["{{base_url}}"],
							"path": ["api", "projects", ""]
						},
						"description": "認証なしでアクセスすると401エラーが返されることを確認"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		}
	]
}
